name: Deploy Website and Admin Panel to GitHub Pages

on:
  push:
    branches: [ master, main, login_test ]
  pull_request:
    branches: [ master, main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Create config file
      run: |
        cp config.example.js config.js
        # Replace placeholder values with GitHub Secrets
        sed -i 's/YOUR_EMAILJS_PUBLIC_KEY_HERE/${{ secrets.EMAILJS_PUBLIC_KEY }}/g' config.js
        sed -i 's/YOUR_EMAILJS_SERVICE_ID_HERE/${{ secrets.EMAILJS_SERVICE_ID }}/g' config.js
        sed -i 's/YOUR_NEWSLETTER_TEMPLATE_ID_HERE/${{ secrets.EMAILJS_NEWSLETTER_TEMPLATE }}/g' config.js
        sed -i 's/YOUR_CONTACT_TEMPLATE_ID_HERE/${{ secrets.EMAILJS_CONTACT_TEMPLATE }}/g' config.js
        sed -i 's|https://your-domain.com|${{ secrets.SITE_DOMAIN }}|g' config.js
        sed -i 's/noreply@your-domain.com/${{ secrets.NEWSLETTER_FROM_EMAIL }}/g' config.js
        
    - name: Build website
      run: node tools/build.js
      
    - name: Build admin interface
      run: |
        # Create admin subdirectory in build
        mkdir -p build/admin
        
        # Copy admin HTML files from build directory
        cp build/newsletter-admin.html build/admin/index.html
        cp build/newsletter-admin.html build/admin/login.html
        
        # Copy assets to admin subdirectory
        cp -r build/assets build/admin/
        
        # Create admin configuration
        cat > build/admin/config.js << 'EOF'
        window.ADMIN_CONFIG = {
          // Note: This is a static-only deployment
          // For full functionality, you'll need to deploy the admin server separately
          // or use a serverless function service
          apiBase: '/api',
          loginUrl: '/admin/login.html',
          adminUrl: '/admin/index.html',
          siteName: 'Android Internals Admin',
          staticMode: true
        };
        
        // Note: Using newsletter-admin.html for both login and admin panel
        // This provides a unified admin interface
        
        // Mock API responses for static demo
        window.mockAPI = {
          login: function(username, password) {
            if (username === 'admin' && password === 'demo123') {
              return Promise.resolve({
                success: true,
                message: 'Login successful (Demo Mode)',
                user: { username: 'admin' }
              });
            } else {
              return Promise.reject({ error: 'Invalid credentials' });
            }
          },
          
          getSubscribers: function() {
            return Promise.resolve([
              {
                email: 'demo@example.com',
                name: 'Demo User',
                date: '2025-01-01',
                status: 'active',
                source: 'demo'
              }
            ]);
          },
          
          getStats: function() {
            return Promise.resolve({
              totalSubscribers: 1,
              activeSubscribers: 1,
              newslettersSent: 0
            });
          }
        };
        EOF
        
        # Update admin HTML files to use mock API in static mode
        sed -i 's|fetch.*\/api\/|mockAPI\.|g' build/admin/*.html
        sed -i 's|window\.location\.href = .\/admin.;|window\.location\.href = \"./index.html\";|g' build/admin/*.html
        
        echo "✅ Admin interface built successfully"
        echo "📁 Admin files created in build/admin/"
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './build'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Show deployment info
      run: |
        echo "🚀 Website and Admin Panel deployment completed!"
        echo "📁 Admin files created in build/admin/"
        echo "🌐 Access URLs:"
        echo "   - Main site: ${{ steps.deployment.outputs.page_url }}"
        echo "   - Admin panel: ${{ steps.deployment.outputs.page_url }}/admin"
        echo "   - Admin login: ${{ steps.deployment.outputs.page_url }}/admin/login.html"
        echo "🔐 Demo credentials: admin / demo123"
